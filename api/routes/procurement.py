from fastapi import APIRouter, HTTPException, UploadFile, File
from typing import List
from langfuse.decorators import observe
from api.config import Config
from api.models.procurement import ProcurementRequest
from api.services.document_processor import DocumentProcessor
from api.db import MongoDB
from datetime import datetime
from bson import ObjectId

router = APIRouter()
document_processor = DocumentProcessor(Config())

# MongoDB connection
db_client = MongoDB.get_mongo_client()
collection = db_client.get_collection("requests")


@router.post("/requests", response_model=ProcurementRequest)
async def create_request(request: ProcurementRequest):
    """Create a new procurement request"""
    try:
        # Exclude _id field from dump since it should be auto-generated by MongoDB
        request_dict = request.model_dump(by_alias=True, exclude={"id"})

        result = collection.insert_one(request_dict)
        request_dict["_id"] = str(result.inserted_id)
        return request_dict
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/requests", response_model=List[ProcurementRequest])
async def get_requests():
    """Get all procurement requests"""
    try:
        requests = []
        for document in collection.find():
            document["_id"] = str(document["_id"])
            requests.append(document)
        return requests
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/requests/{request_id}", response_model=ProcurementRequest)
async def get_request(request_id: str):
    """Get a specific procurement request by ID"""
    try:
        request = collection.find_one({"_id": ObjectId(request_id)})
        if request:
            request["_id"] = str(request["_id"])
            return request
        raise HTTPException(status_code=404, detail="Request not found")
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.patch("/requests/{request_id}/status")
async def update_request_status(request_id: str, status_data: dict):
    """Update the status of a procurement request"""
    try:
        status = status_data.get("status")
        if not status or status not in ["OPEN", "IN_PROGRESS", "CLOSED"]:
            raise HTTPException(status_code=400, detail="Invalid status")

        result = collection.update_one(
            {"_id": ObjectId(request_id)},
            {"$set": {"status": status, "updated_at": datetime.utcnow()}},
        )

        if result.modified_count == 0:
            raise HTTPException(status_code=404, detail="Request not found")

        return {"message": "Status updated successfully"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.delete("/requests/{request_id}")
async def delete_request(request_id: str):
    """Delete a procurement request"""
    try:
        result = collection.delete_one({"_id": ObjectId(request_id)})

        if result.deleted_count == 0:
            raise HTTPException(status_code=404, detail="Request not found")

        return {"message": "Request deleted successfully"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@observe(name="api_process_document")
@router.post("/process-document")
async def process_document(file: UploadFile = File(...)):
    """Process a vendor offer document and extract information"""
    try:
        print(f"Processing file: {file.filename}, content_type: {file.content_type}")

        # Read the file content as bytes
        content = await file.read()
        print(f"File size: {len(content)} bytes")

        # Process the document using the new pipeline
        extracted_data = await document_processor.process_document(
            content=content,
            content_type=file.content_type or "application/octet-stream",
        )

        print(f"Extracted data: {extracted_data}")
        return extracted_data

    except Exception as e:
        print(f"Error processing document: {str(e)}")
        raise HTTPException(
            status_code=500, detail=f"Error processing document: {str(e)}"
        )
